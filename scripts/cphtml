#!/bin/bash
#
# cphtml (Create Project HTML)
# @author Zekumoru Dragonhart
# @description Automate the process of creating a new project and setting up its webpack, ESLint, and Prettier.
#
# Usage
#
#     cphtml <project-name|ssh-github-link> [--skip|-s]
#       [--title|-t <title>] [--github|-g <ssh-github-link>] 
#       [--name|-n <name>]
#
#   <project-name|ssh-github-link>
#     Provide either the project's name or clone a
#     repository from GitHub.
#     GitHub repository MUST be empty (README excluded).
#
#   [--skip|-s]
#     Skips ESLint init's questionnaire.
#
#   [--title|-t <title>]
#     Changes the title as seen on the HTML document's tab.
#
#   [--github|-g <ssh-github-link>] 
#     Clone <ssh-github-link> repository.
#     GitHub repository MUST be empty (README excluded).
#
#     If instead of <project-name>, a GitHub repo link
#     is given, this command is ignored.
#
#   [--name|-n <name>]
#     Sets the name of the project's directory.
#
#     If <project-name> is given, this command is ignored.
# 
# Error Codes
# 0: No error.
# 1: Function errors. Should only be used internally.
# 2: Missing project name or it is invalid.
# 3: Unable initialize npm/git.
# 4: Unable to download .gitignore.
# 5: Unable to install npm packages.
# 6: Cannot modify package.json using json.
# 7: Unable to create webpack.config.js.
# 8: Unable to create 'src' folder.
# 9: Unable to create source files.
# 10: Unable to initialize and setup ESLint properly, may causes of:
#      - Did not choose .json for the ESLint config file.
#      - The json npm package could not modify the ESLint config file.
#      - A problem arose with ESLint's initialization itself. 
# 11: Unable to create .vscode/settings.json file.
# 12: Unable to properly create .prettierignore file.
# 13: Unable to properly set up git hook for Prettier.
# 20: Cannot clone repository from git.
#
# Options error codes
# 90: Unknown option.
# 91: Invalid argument.
# 92: Option duplicate.
#

# Color constants
RED="\033[0;31m"
GREEN="\033[0;32m"
NO_COLOR="\033[0m"

# Constants
NODEJS_GITIGNORE_LINK="https://raw.githubusercontent.com/github/gitignore/main/Node.gitignore"

COMMAND_NAME=${0##*/}
PROJECT_NAME=$1

PARENT_DIR="$PWD"
PROJECT_DIR="$PARENT_DIR/$PROJECT_NAME"

# Utility functions
function log() {
  echo -e "$2$COMMAND_NAME: $1${NO_COLOR}"
}

function checkIfError() {
  if [ $? -ne 0 ] ; then
    exitCode="$1"
    errorMessage="$2"

    cd $PARENT_DIR
    raiseError $exitCode "$errorMessage"
    exit $exitCode
  fi
}

function raiseError() {
  exitCode="$1"
  errorMessage="$2"
  echo -e "${RED}ERROR: $COMMAND_NAME: $errorMessage${NO_COLOR}"
  exit $exitCode
}

function checkIfErrorArgument() {
  option="$1"
  argument="$2"
  errorMessage="$3"
  if [ "$argument" == "" ] ; then
    raiseError 91 "$option: missing argument"
  elif [[ "$argument" =~ ^-.* ]] ; then
    if [ "$errorMessage" == "" ] ; then
      raiseError 91 "$option: invalid argument: $argument"
    fi
    raiseError 91 "$errorMessage"
  fi
}

function checkIfErrorOptionDuplicate() {
  option=$1
  optionValue=$2
  if [ "$optionValue" != "" ] && [ $optionValue -eq 1 ] ; then 
    raiseError 92 "$option: duplication option"
  fi
}

while [ true ] ; do
  option="$2"
  argument="$3"
  case "$option" in
    "--skip"|"-s")
      checkIfErrorOptionDuplicate "$option" $SKIP_OPT
      SKIP_OPT=1
      ;;
    "--title"|"-t")
      TITLE_OPT=1
      checkIfErrorArgument "$option" "$argument"
      TITLE="$argument"
      shift 1
      ;;
    "--github"|"-g")
      GITHUB_CLONE_OPT=1
      checkIfErrorArgument "$option" "$argument" "invalid github clone url"
      GITHUB_CLONE_URL="$argument"
      shift 1
      ;;
    "--name"|"-n")
      NAME_OPT=1
      checkIfErrorArgument "$option" "$argument"
      NAME="$argument"
      shift 1
      ;;
    "")
      break
      ;;
    *)
      raiseError 90 "unknown option: $option"
      ;;
  esac
  shift 1
done

# Open project directory if already exists
if [ -d $PROJECT_DIR ] ; then
  echo "Project already exists, opening in vscode instead"
  code $PROJECT_DIR
  exit 0
fi

# Is given project name a github repo?
if [[ "$PROJECT_NAME" =~ ^git@github\.com.* ]] ; then
  GITHUB_CLONE_OPT=1
  GITHUB_CLONE_URL="$PROJECT_NAME"

  if [ "$NAME_OPT" != "" ] && [ $NAME_OPT -eq 1 ] ; then 
    PROJECT_NAME="$NAME"
  else
    [[ "git@github.com:Zekumoru/Zekumoru.git" =~ \/.*\.git$ ]]
    PROJECT_NAME="${BASH_REMATCH:1:-4}"
  fi

  PROJECT_DIR="$PARENT_DIR/$PROJECT_NAME"
else
  mkdir $PROJECT_NAME
  checkIfError 2 "invalid project name: $PROJECT_NAME"
fi

# Clone from online github repo?
if [ "$GITHUB_CLONE_OPT" != "" ] && [ $GITHUB_CLONE_OPT -eq 1 ] ; then
  git clone $GITHUB_CLONE_URL $PROJECT_DIR
  checkIfError 20 "cannot clone: $GITHUB_CLONE_URL"
fi

# Setting up npm and git
cd $PROJECT_DIR
npm init -y
checkIfError 3 "error while initializing npm"

if [ "$GITHUB_CLONE_OPT" == "" ] ; then
  git init .
  checkIfError 3 "error while initializing git"if [ "$GITHUB_CLONE_OPT" != "" ]
fi

# Download Node.js .gitignore
wget -O .gitignore $NODEJS_GITIGNORE_LINK
checkIfError 4 "error while downloading .gitignore at $NODEJS_GITIGNORE_LINK"

# Install all dependencies
npm i -D webpack webpack-cli webpack-dev-server style-loader css-loader html-webpack-plugin
checkIfError 5 "error while installing dev dependencies"

npm i -P @mdi/font normalize.css
checkIfError 5 "error while installing prod dependencies"

npm i --location=global json
checkIfError 5 "error while installing json"

# Modify package.json
json -I -f package.json -e "this.main = 'src/app.js'; this.scripts = {}; this.scripts.build = 'webpack'; this.scripts.serve = 'webpack serve';"
checkIfError 6 "error while modifying package.json"

# Create webpack.config.js
if [ "$TITLE_OPT" != "" ] && [ $TITLE_OPT == 1 ] ; then
  title="$TITLE"
else
  title="$PROJECT_NAME"
fi

cat > $PROJECT_DIR/webpack.config.js << EndOfFile
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  mode: 'development',
  entry: {
    build: path.resolve(__dirname, 'src/app.js'),
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: '[name].[contenthash].js',
    assetModuleFilename: '[name][ext]',
    clean: true,
  },
  optimization: {
    splitChunks: {
      chunks: 'all',
    },
  },
  devtool: 'inline-source-map',
  devServer: {
    static: {
      directory: path.resolve(__dirname, 'dist'),
    },
    watchFiles: [
      path.resolve(__dirname, 'src/*.html'),
    ],
    port: 3001,
    open: true,
    hot: true,
    compress: true,
    historyApiFallback: true,
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        use: [
          'style-loader',
          'css-loader',
        ],
      },
      {
        test: /\.(png|jpg|jpeg|svg|gif)$/i,
        type: 'asset/resource',
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      title: '$title',
      filename: 'index.html',
      template: path.resolve(__dirname, 'src/template.html'),
    }),
  ],
};
EndOfFile

ls $PROJECT_DIR/webpack.config.js
checkIfError 7 "error while creating webpack.config.js"

# Create source files
SOURCE_DIR="$PROJECT_DIR/src"
mkdir $SOURCE_DIR

if ! [ -d $SOURCE_DIR ] ; then
  raiseError 8 "cannot create 'src' folder"
fi

cat > $SOURCE_DIR/template.html << EndOfFile
<!DOCTYPE html>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%=htmlWebpackPlugin.options.title%></title>
  </head>
  <body></body>
</html>
EndOfFile

cat > $SOURCE_DIR/style.css << EndOfFile
EndOfFile

cat > $SOURCE_DIR/app.js << EndOfFile
import '@mdi/font/css/materialdesignicons.css';
import 'normalize.css';
import './style.css';
EndOfFile

cd $SOURCE_DIR
ls template.html style.css app.js
checkIfError 9 "error while creating source files"

# Setting up ESLint
cd $PROJECT_DIR

if [  "$SKIP_OPT" != "" ] && [ $SKIP_OPT -eq 1 ] ; then

npm i -D eslint eslint-plugin-import eslint-config-airbnb-base
cat > $PROJECT_DIR/.eslintrc.json << EndOfFile
{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": "airbnb-base",
  "overrides": [],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "rules": {
    "lines-between-class-members": "off",
    "no-param-reassign": "off",
    "no-shadow": "off",
    "no-use-before-define": "off",
    "func-names": "off",
    "no-plusplus": "off",
    "class-methods-use-this": "off",
    "no-new": "off",
    "consistent-return": "off",
    "max-len": "off",
    "no-continue": "off"
  }
}
EndOfFile

else
  clear -x
  echo "Now setting up ESLint..."
  echo "Choose the JSON format as config file for ESLint, otherwise setup will halt."
  npm init @eslint/config
  json -I -f .eslintrc.json -e "this.rules = {'lines-between-class-members':'off','no-param-reassign':'off','no-shadow':'off','no-use-before-define':'off','func-names':'off','no-plusplus':'off','class-methods-use-this':'off','no-new':'off','consistent-return':'off','max-len':'off','no-continue':'off',}"
fi

checkIfError 10 "error while initializing and setting up eslint"
mkdir .vscode && echo '{"editor.codeActionsOnSave":{"source.fixAll.eslint":true},"eslint.validate":["javascript"]}' > .vscode/settings.json && json -I -f .vscode/settings.json
checkIfError 11 "error while creating vscode settings.json"

# Setting up Prettier
cd $PROJECT_DIR
npm install --save-dev --save-exact prettier
echo $'# Ignore JS files for Eslint to format\n*.js\n\n# Ignore HTML files\n*.html\n' > .prettierignore && cat .gitignore >> .prettierignore
checkIfError 12 "error while creating .prettierignore"

npm install --save-dev husky lint-staged ; npx husky install ; npm pkg set scripts.prepare="husky install" ; npx husky add .husky/pre-commit "npx lint-staged" && json -I -f package.json -e "this['lint-staged'] = {'**/*': 'prettier --write --ignore-unknown'}"
checkIfError 13 "error while creating git hook for prettier"

# Commit initial
git add . && git commit -m "Initial commit"

cd $PARENT_DIR
log "Successfully created $PROJECT_NAME. Now opening in vscode..." $GREEN
code $PROJECT_DIR
